# We will begin with a data set called "cats" from the "MASS" library,
# which contains information on various features of house cats.
# Please install package if not already installed
# install.packages('MASS')
library("MASS")
data(cats)
str(cats)
summary(cats)
with(cats, plot(Bwt, Hwt))
title(main="Heart Weight (g) vs. Body Weight (kg)\nof Domestic Cats")
# Pearson's Correlation:
with(cats, cor(Bwt, Hwt))
#coefficient of determination:
with(cats, cor(Bwt, Hwt))^2
#test of significance:
with(cats, cor.test(Bwt, Hwt))
#For positive correlation:
with(cats, cor.test(Bwt, Hwt, alternative="greater", conf.level=.8))
#For a more revealing scatterplot:
with(cats, plot(Bwt, Hwt,
xlab="Body Weight in kg",
ylab="Heart Weight in g",
main="Heart Weight vs. Body Weight of Cats"))
with(cats,points(Bwt[Sex=="F"],Hwt[Sex=="F"],pch=16,col="red"))
with(cats,points(Bwt[Sex=="M"],Hwt[Sex=="M"],pch=17,col="blue"))
legend("topleft", c('Females','Males'),
cex=0.60, horiz = FALSE, pch=c(16,17),
col=c('red','blue'))
# Correlation and Covariance Matrices#
# If a data frame (or other table-like object) contains
# more than two numerical variables, then the cor( ) function
# will result in a correlation matrix.
rm(cats) # if you haven't already
data(cement) # also in the MASS library
str(cement)
cor(cement)
# If you prefer a covariance matrix, use cov( )...
cov(cement)
# If you have a covariance matrix and want a correlation matrix...
cov.matr = cov(cement)
cov2cor(cov.matr)
# If you want a visual representation of the correlation matrix (i.e., a scatterplot matrix)...
pairs(cement)
# The command plot(cement) would also have done the same thing.
plot(cement)
#Correlations for Ranked Data#
ls()
rm(cement, cov.matr)                 # clean up first
coach1 = c(1,2,3,4,5,6,7,8,9,10)
coach2 = c(4,8,1,5,9,2,10,7,3,6)
ls()
cor(coach1, coach2, method="spearman")
cor.test(coach1, coach2, method="spearman")
cor(coach1, coach2, method="kendall")
cor.test(coach1, coach2, method="kendall")
ls()
rm(coach1,coach2)                    # clean up again
#Linear Regression#
data(cats)
attach(cats)
# name the output anything you like
lm.out = lm(Hwt ~ Bwt)
lm.out
summary(lm.out)
# turn off the significance stars
options(show.signif.stars=F)
# shows an ANOVA table
# here Pr is insignificant (i.e. Hwt and Bwt association is low)
anova(lm.out)
# plotting the regression line on a scatterplot:
plot(Hwt ~ Bwt, main="Cat Hwt-Bwt Regression Plot")
abline(lm.out, col="red")
# make a copy of current settings
mypar <- par()
par(mfrow=c(2,2))
plot(lm.out)
cats[144,]
lm.out$fitted[144]
lm.out$residuals[144]
# if you haven't already done this
par(mfrow=c(1,1))
# Cook's Distance plot converts this to a standardized residual
plot(cooks.distance(lm.out), main="Cat Hwt-Bwt Cook's Distance Plot")
# Case 144 tops the charts. One is to look at the regression coefficients
# is without the outlying point in the model.
lm.without144 = lm(Hwt ~ Bwt, subset=(Hwt<20.5))
lm.without144
# Another is to use a procedure that is robust
# in the face of outlying points.
rlm(Hwt ~ Bwt)
# restore original settings
par(mypar)
#ANOVA#
# Looking at the breakdown of variance in the outcome variable.
# Quick, easy way to rule out un-needed variables
# that contribute little to the explanation of a dependent variable
# Import cars dataset:
cars <- read.csv('./data/Cars.csv')
head(cars)
a1 <- aov(HighwayMPG~Origin,data=cars)
summary(a1)
a2 <- aov(HighwayMPG~Origin+Type,data=cars)
summary(a2)
drop1(a2,~.,test='F')
a3 <- aov(HighwayMPG~Origin*Type,data=cars)
drop1(a3,~.,test='F')
# Plotting categorical-by-categorical interactions:
interaction.plot(cars$Origin,cars$Type,cars$HighwayMPG)
interaction.plot(cars$Origin,cars$Type,cars$HighwayMPG,pch=c(1,15,4,16,0,18),type='b')
# ANOVA to compare nested models
mymodel1 <- lm(HighwayMPG~Origin+Weight,data=cars)
mymodel2 <- lm(HighwayMPG~Origin+Weight+EngineSize+Price,data=cars)
anova(mymodel1,mymodel2)
#Logistic regression#
adm <- read.csv('./data/binary.csv')
head(adm)
adm$rank <- factor(adm$rank)
logit1 <- glm(admit~rank,data=adm,family='binomial')
summary(logit1)
logit2 <- glm(admit~gpa,data=adm,family='binomial')
summary(logit2)
logit3 <- glm(admit~rank+gre+gpa,data=adm,family='binomial')
summary(logit3)
# Plotting predicted probabilities for continuous predictor
mypp <- data.frame(gpa=sort(adm$gpa))
plot(adm$gpa,adm$admit,pch=16,cex=.5)
lines(mypp$gpa,predict(logit2,newdata=mypp,type='response'))
#Mixed models#
popular <- read.csv('./data/Popular.csv')
#install.packages('lme4')
library(lme4)
# Random intercept
mixed1 <- lmer(popular~(1|class),data=popular)
summary(mixed1)
# Adding fixed effects:
mixed2 <- lmer(popular~texp+sex+extrav+(1|class),data=popular)
summary(mixed2)
# Adding random slopes:
mixed3 <- lmer(popular~texp+sex+extrav+(1+sex|class),data=popular)
summary(mixed3)
# Plotting random slopes:
rnd_slopes <- by(popular,popular$class,function(popular) fitted(lm(popular~sex,data=popular)))
rnd_slopes <- unlist(rnd_slopes)
names(rnd_slopes) <- NULL
interaction.plot(popular$sex,popular$class,rnd_slopes)
#---------------------------------#
#- Data Analysis & Graphics in R -#
#-------Shapefiles----------------#
#---------------------------------#
#PPP's planar point patterns#
# Please install package if not already installed
# install.packages('spatstat')
library(spatstat)     # comprehensive toolbox for analysing spatial data
data(redwoodfull)     # loads locations of 195 redwood seedlings in a square sampling region
summary(redwoodfull)
plot(redwoodfull)
plot(density(redwoodfull, .05))
plot(density(redwoodfull, .05),col=brewer.pal('BuPu',n=9))
contour(density(redwoodfull, .05), axes=FALSE)
image(density(redwoodfull, .05))
contour(density(redwoodfull, .05), axes=FALSE, add=TRUE)
Q<-quadratcount(redwoodfull, nx=2, ny=2)
Q
plot(redwoodfull)
plot(Q, add=TRUE, cex=2)
#Shape Files#
# Please install package if not already installed
#install.packages('maptools')
#install.packages('rgdal')
#if (!"maps" %in% installed.packages()) install.packages("maps")
library(maptools)
library(rgdal)
library(maps)
map() # low resolution map of the world
map('usa')  # national boundaries
map('county', 'new jersey') # county map of New Jersey
map('state', region = c('new york', 'new jersey', 'penn'))  # map of three states
map("state", ".*dakota", myborder = 0)  # map of the dakotas
map.axes()  # show the effect of myborder = 0
if(require(mapproj))
map('state', proj = 'bonne', param = 45)    # Bonne equal-area projection of states
# names of the San Juan islands in Washington state
map('county', 'washington,san', names = TRUE, plot = FALSE)
# national boundaries in one linetype, states in another
map("state", interior = FALSE)
map("state", boundary = FALSE, lty = 2, add = TRUE)
# plot the ozone data on a base map
data(ozone)
map("state", xlim = range(ozone$x), ylim = range(ozone$y))
text(ozone$x, ozone$y, ozone$median)
box()
if(require(mapproj)) {
# mapproj is used for  projection="polyconic"
# color US county map by 2009 unemployment rate
# match counties to map using FIPS county codes
# load unemp data which includes data for some counties not on the "lower 48 states" county map,
# such as those in Alaska, Hawaii, Puerto Rico, and some tiny Virginia cities
data(unemp)
data(county.fips)
# define color buckets
colors = c("#F1EEF6", "#D4B9DA", "#C994C7", "#DF65B0", "#DD1C77", "#980043")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
leg.txt <- c("<2%", "2-4%", "4-6%", "6-8%", "8-10%", ">10%")
# align data with map definitions by (partial) matching state,county
# names, which include multiple polygons for some counties
cnty.fips <- county.fips$fips[match(map("county", plot=FALSE)$names,
county.fips$polyname)]
colorsmatched <- unemp$colorBuckets [match(cnty.fips, unemp$fips)]
# draw map
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0,
lty = 0, projection = "polyconic")
map("state", col = "white", fill = FALSE, add = TRUE, lty = 1, lwd = 0.2,
projection="polyconic")
title("unemployment by county, 2009")
legend("bottomleft", leg.txt, cex=0.60, horiz = FALSE, fill = colors)
}
#---------------------------------#
#- Data Analysis & Graphics in R -#
#-------------ggplot2-------------#
#---------------------------------#
# Please install package if not already installed
# install.packages('ggplot2')
# install.packages('RColorBrewer')
# install.packages('devtools')
# install.packages('scales')
library(ggplot2); library(scales); library(grid); library(RColorBrewer)
# Theme created at start of file for orgazinational purposes
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
palette <- brewer.pal("Greys", n=9)
color.background = palette[2]
color.grid.major = palette[3]
color.axis.text = palette[6]
color.axis.title = palette[7]
color.title = palette[9]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.background, color=color.background)) +
theme(plot.background=element_rect(fill=color.background, color=color.background)) +
theme(panel.border=element_rect(color=color.background)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_blank()) +
theme(axis.ticks=element_blank()) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.background)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(0.35, 0.2, 0.3, 0.35), "cm"))
}
#Import cars dataset:
cars <- read.csv('./data/Cars.csv')
head(cars)
#ggplot uses a different "grammar" for building plots
#than other graphics functions. It takes 2 steps:
#1. Define a gglot object based on a data frame
#2. Build layers to your ggplot object on a single command line
###
### Chart 0-1: Barplot & Scatterplot
###
typebar <- ggplot(cars,aes(x=Type))
typebar + geom_bar()
mpg <- ggplot(cars,aes(x=Weight,y=HighwayMPG))
mpg + geom_point()
#Change properties of the graph by adding more layers...
mpg + geom_point(pch=24,cex=2.5) +
labs(list(title='Car Weights and MPG', x='Weight',y='MPG'))
mpg + geom_point() +
geom_vline(xintercept=mean(cars$Weight)) +
geom_hline(yintercept=mean(cars$HighwayMPG))
#Smoothing method="gam" if max(frequency)>1000. If <1000, method="loess".
mpg + geom_point() +
stat_smooth(method="loess")
mpg + geom_point() +
xlim(c(2500,4000)) +
ylim(c(20,35))
#You can color or fill your graphs with another attribute:
typebar2 <- ggplot(cars,aes(x=Type,fill=Origin))
typebar2 + geom_bar()
mpg2 <- ggplot(cars,aes(x=Weight,y=HighwayMPG,col=Origin))
mpg2 + geom_point()
typebar2 + geom_bar() + scale_fill_brewer(type='seq',palette=3)
mpg2 + geom_point(pch=16,cex=2.5) + scale_colour_brewer(type='qual',palette=3)
###
### Chart 0-2: Facet Grid
###
# Divide with "Origin" horizontal:
mpg + geom_point() + facet_grid(. ~ Origin)
# Divide with "Origin" vertical:
mpg + geom_point() + facet_grid(Origin ~ .)
# Divide with "Origin" vertical, "Type" horizontal
mpg + geom_point() + facet_grid(Origin ~ Type)
#Import buzzfeed headlines dataset:
df <- read.csv("./data/buzzfeed_headlines.csv")
head(df)
###
### Chart 1-1: Histogram of Listicle sizes
###
ggplot(df, aes(listicle_size)) + geom_histogram(binwidth=1)
ggsave("ggplot2_graphics_1.png", dpi=300, width=4, height=3)
###
### Chart 1-2: + Theme
###
ggplot(df, aes(listicle_size)) +
geom_histogram(binwidth=1) +
fte_theme()
ggsave("ggplot2_graphics_2.png", dpi=300, width=4, height=3)
###
### Chart 1-3: + Axis Labels
###
ggplot(df, aes(listicle_size)) +
geom_histogram(binwidth=1) +
fte_theme() +
labs(title="Distribution of Listicle Sizes for BuzzFeed Listicles", x="# of Entries in Listicle", y="# of Listicles")
ggsave("ggplot2_graphics_3.png", dpi=300, width=4, height=3)
###
### Chart 1-4: + Final Tweaks
###
ggplot(df, aes(listicle_size)) +
geom_histogram(binwidth=1, fill="#c0392b", alpha=0.75) +
fte_theme() +
labs(title="Distribution of Listicle Sizes for BuzzFeed Listicles", x="# of Entries in Listicle", y="# of Listicles") +
scale_x_continuous(breaks=seq(0,50, by=5)) +
scale_y_continuous(labels=comma) +
geom_hline(yintercept=0, size=0.4, color="black")
ggsave("ggplot2_graphics_4.png", dpi=300, width=4, height=3)
###
### Chart 2-1: Scatterplot of Shares vs. Likes
###
ggplot(df, aes(x=listicle_size, y=num_fb_shares)) +
geom_point()
ggsave("ggplot2_graphics_5.png", dpi=300, width=4, height=3)
###
### Chart 2-2: Transparency + Log
###
ggplot(df, aes(x=listicle_size, y=num_fb_shares)) +
geom_point(alpha=0.05) +
scale_y_log10(labels=comma)
ggsave("ggplot2_graphics_6.png", dpi=300, width=4, height=3)
###
### Chart 2-3: Theme + Axis
###
ggplot(df, aes(x=listicle_size, y=num_fb_shares)) +
geom_point(alpha=0.05) +
scale_y_log10(labels=comma) +
fte_theme() +
labs(x="# of Entries in Listicle", y="# of Facebook Shares", title="FB Shares vs. Listicle Size for BuzzFeed Listicles")
ggsave("ggplot2_graphics_7.png", dpi=300, width=4, height=3)
###
### Chart 2-4: Tidy Up
###
#Smoothing method="gam" if max(frequency)>1000. If <1000, method="loess".
ggplot(df, aes(x=listicle_size, y=num_fb_shares)) +
geom_point(alpha=0.05, color="#c0392b") +
scale_x_continuous(breaks=seq(0,50, by=5)) +
scale_y_log10(labels=comma, breaks=10^(0:6)) +
geom_hline(yintercept=1, size=0.4, color="black") +
geom_smooth(method="gam", alpha=0.25, color="black", fill="black") +
fte_theme() +
labs(x="# of Entries in Listicle", y="# of Facebook Shares",
title="FB Shares vs. Listicle Size for BuzzFeed Listicles")
ggsave("ggplot2_graphics_8.png", dpi=300, width=4, height=3)
#---------------------------------#
#- Data Analysis & Graphics in R -#
#--------Simple Graphics------ ---#
#---------------------------------#
#Import the med trial dataset:
med <- read.csv('./data/MedicalData.csv')
head(med)
#BMI and BP measurements#
# Explaining fivenum():
# five number summary (minimum, lower-hinge, median, upper-hinge, maximum)
# for the input data
mean(med$BMI)
median(med$BMI)
fivenum(med$BMI)
mean(med$BP)
median(med$BP)
fivenum(med$BP)
#Scatterplots#
#Basic Scatterplot:
plot(med$BMI,med$BP)
#Export your plot:
pdf('mygraph.pdf')
plot(med$BMI,med$BP)
dev.off()
#We can add layers to plots to do a lot of different things...
#See http://www.statmethods.net/advgraphs/parameters.html for more options
#Adding options to plot():
plot(med$BMI, med$BP, main='BMI and Blood Pressure',
xlab='BMI',ylab='Blood Pressure (mmHg)',
pch=20)
plot(med$BMI,med$BP,main='BMI and Blood Pressure',
xlab = 'BMI', ylab = 'Blood Pressure',
pch = 20, col = 'red')
plot(med$BMI,med$BP,main='BMI and Blood Pressure',
xlab = 'BMI', ylab = 'Blood Pressure',
pch = 20, col = 'red', xlim = c(0,80))
#1. Play with pch
plot(med$BMI,med$BP,main='BMI and Blood Pressure',
xlab='BMI',ylab='Blood Pressure (mmHg)',
pch=20,col='grey')
# points() draws a sequence of points
# centered at the specified coordinates.
points(med$BMI,med$BP,main='BMI and Blood Pressure',
xlab='BMI',ylab='Blood Pressure (mmHg)')
#2. Color different groups and add a legend
# Group patients by gender:
females <- med[med$Gender=='Female',]
males <- med[med$Gender=='Male',]
plot(females$BMI,females$BP,main='BMI and Blood Pressure',
xlab='BMI',ylab='Blood Pressure (mmHg)',
pch=20,col='orange')
points(males$BMI,males$BP,
pch=20,col='blue')
legend(45,70,
c('Females','Males'),
pch=c(20,20),
col=c('orange','blue'))
#3. Add model fit lines or lines at meaningful values with abline()
plot(med$BMI,med$BP,main='BMI and Blood Pressure',
xlab='BMI',ylab='Blood Pressure (mmHg)',
pch=20)
abline(h=mean(med$BP),col='blue',lty=2)
abline(v=mean(med$BMI),col='dark green',lwd=4)
abline(lm(med$BP~med$BMI),col='red')
#Histograms#
hist(med$Cholesterol)
# Set a graphical parameter within the plotting function
hist(med$Cholesterol, col.lab="blue", xlim=c(0,2000))
#Adding options:
hist(med$Cholesterol,main='Histogram of Cholesterol',
xlab='Cholesterol (mg/dL)',col='grey',
xlim=c(0,2000))
#Grouped histograms#
# 8 bit color code - last 2 bits denote the transparency
hist(males$BP,main='Histogram of Blood Pressure',
xlab='Blood Pressure (mmHg))',col='#31a35475',
ylim=c(0,20),xlim=c(40,100))
# add=T lets layer one histogram over the other
# color transparecy is needed here too.
hist(females$BP,col='#756bb175',add=T)
#Boxplots#
boxplot(med$Glucose,main='Saliva Glucose Levels',
ylab='Glucose (mg/dL)')
# Boxplots make it easy to compare groups:
# here is a Boxplot of Glucose by Diabetic
boxplot(med$Glucose~med$Diabetic, main='Saliva Glucose Levels',
ylab='Glucose (mg/dL)', xlab='Diabetic Status',
names=c('No','Yes'), col=c('#0571b0','#ca0020'))
#Barplot - Displays for categorical variables#
table(med$Diabetic)
barplot(table(med$Diabetic))
#Options are definitely needed:
barplot(table(med$Diabetic),main='Frequency of Diabetic Status',
xlab='Diabetic Status',names=c('No','Yes'),
ylab='Frequency',ylim=c(0,100),
col=c('#018571','#b2abd2'))
# For two categorical variables:
# Diabetic Status by Gender
table(med$Diabetic,med$Gender)
a <- table(med$Diabetic,med$Gender)
barplot(a,ylim=c(0,100),main='Diabetic Status by Gender',
ylab='Frequency',col=c('#018571','#b2abd2'))
#Option to add categories beside each other in barplot
barplot(a,main='Diabetic Status by Gender',
ylab='Frequency',col=c('#018571','#b2abd2'),beside=T)
#Density plots#
x <- seq(-4,4,.1)
y <- dnorm(x) # gives the density function
degf <- c(1, 3, 8, 30)
colors <- c("red", "blue", "darkgreen", "gold", "black")
labels <- c("df=1", "df=3", "df=8", "df=30", "normal")
plot(x, y, type="l", lty=2, xlab="x value",
ylab="Density", main="Comparison of t Distributions")
for (i in 1:4){
lines(x, dt(x,degf[i]), lwd=2, col=colors[i])
}
legend("topright", inset=.05, title="Distributions",
labels, lwd=2, lty=c(1, 1, 1, 1, 2), col=colors)
#par() and layout()#
par()                      # view current settings
opar <- par()              # make a copy of current settings
par(col.lab="red")         # red x and y labels
hist(med$Cholesterol)      # create a plot with these new settings
layout(matrix
(1:4,ncol=2,byrow=TRUE))      # with layout(), you can tile your graphs
hist(med$Age)
hist(med$Cholesterol)
hist(med$BMI)
hist(med$BP)
par(opar)                  # restore original settings
#---------------------------------#
#- Data Analysis & Graphics in R -#
#-----------Setup Script ---------#
#---------------------------------#
#--- if you want, install all CRAN packages ---#
#--- Already installed for me ---#
# availablePackages <- available.packages()[,1]
# install.packages(availablePackages)
#---Set R Working Directory---#
getwd()
# put your directory path to R_Tutorial
setwd('/Users/atrivedi/Documents/TACC/GitHub/DataAnalysisAndGraphicsUsingR/R_Tutorial')
